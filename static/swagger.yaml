swagger: '2.0'
info:
  title: "Ecommerce API"
  description: "API that includes resources to manage an ecommerce website"
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

# Routes  
paths: 
  # Login path
  /customers/login:
    post:
      tags:
        - Customer
      summary: "Login endpoint (generate a token)"
      description: "Endpoint for user authentication, and token generation"
      parameters:
        - in: "body"
          name: "body"
          description: "Credentials for login (email and password)"
          required: true
          schema:
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Login Successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              token: "kjhjygfjgdhv/;lvkcnm...."
              message: "Successfully logged in"
              status: "success"

  # Get All Customers Path
  /customers:
    get:
      tags: 
        - Customer
      summary: "Retrieve a list of customer objects"
      description: "Endpoint to retrieve all customers, requires token authentication"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved all customers"
          schema:
            $ref: "#/definitions/GetAllCustomers"
          examples:
            application/json:
              name: "Dare Fatade"
              email: "dfata@gmail.com"
              phone: "1256598789"
              username: "jftade"

  # Create Customer
  /customers/create:
    post:
      tags:
        - Customer
      summary: "Create a new customer"
      description: "Endpoint to create a new customer"
      parameters:
        - in: "body"
          name: "body"
          description: "Customer details"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "Customer successfully created"
          schema:
            $ref: "#/definitions/CustomerResponse"

  # List Products
  /products:
    get:
      tags:
        - Product
      summary: "List all products"
      description: "Endpoint to retrieve all products"
      responses:
        200:
          description: "Successfully retrieved products"
          schema:
            $ref: "#/definitions/ProductListResponse"

  # Create Product
  /products/create:
    post:
      tags:
        - Product
      summary: "Create a new product"
      description: "Endpoint to create a new product"
      parameters:
        - in: "body"
          name: "body"
          description: "Product details"
          required: true
          schema:
            $ref: "#/definitions/CreateProductPayload"
      responses:
        201:
          description: "Product successfully created"
          schema:
            $ref: "#/definitions/ProductResponse"

  # Add to Cart
  /customers/cart/add:
    post:
      tags:
        - Cart
      summary: "Add product to cart"
      description: "Endpoint to add products to the customer's cart"
      parameters:
        - in: "body"
          name: "body"
          description: "Details of product to add to the cart"
          required: true
          schema:
            $ref: "#/definitions/AddToCartPayload"
      responses:
        200:
          description: "Product added to cart"
          schema:
            $ref: "#/definitions/CartResponse"

  # View Cart
  /customers/cart/view?customer_id=1:
    get:
      tags:
        - Cart
      summary: "View the customer's cart"
      description: "Endpoint to retrieve the products in the customer's cart"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Cart retrieved successfully"
          schema:
            $ref: "#/definitions/ViewCartResponse"

  # Remove from Cart
  /customers/cart/remove:
    post:
      tags:
        - Cart
      summary: "Remove an item from the cart"
      description: "Endpoint to remove a specific product from the customer's cart"
      parameters:
        - in: "body"
          name: "body"
          description: "Details of the product to remove from the cart"
          required: true
          schema:
            $ref: "#/definitions/RemoveFromCartPayload"
      responses:
        200:
          description: "Item successfully removed from the cart"
          schema:
            $ref: "#/definitions/CartResponse"

  # Empty Cart
  /customers/cart/empty:
    post:
      tags:
        - Cart
      summary: "Empty the customer's cart"
      description: "Endpoint to remove all products from the customer's cart"
      parameters:
        - in: "body"
          name: "body"
          description: "ID of the customer to empty cart"
          required: true
          schema:
            $ref: "#/definitions/EmptyCartPayload"
      responses:
        200:
          description: "Cart successfully emptied"
          schema:
            $ref: "#/definitions/CartResponse"

  # Place Order
  /customers/order/place:
    post:
      tags:
        - Order
      summary: "Place an order"
      description: "Endpoint to place an order based on the items in the cart"
      parameters:
        - in: "body"
          name: "body"
          description: "Details for placing the order"
          required: true
          schema:
            $ref: "#/definitions/PlaceOrderPayload"
      responses:
        201:
          description: "Order successfully placed"
          schema:
            $ref: "#/definitions/OrderResponse"

# Payload and Responses
definitions:
  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
    required:
      - name
      - email
      - phone
      - username
      - password

  CustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      username:
        type: "string"

  CreateProductPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
    required:
      - name
      - price

  ProductResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"

  ProductListResponse:
    type: "array"
    items:
      $ref: "#/definitions/ProductResponse"

  AddToCartPayload:
    type: "object"
    properties:
      customer_id:
        type: "integer"
      product_id:
        type: "integer"
    required:
      - customer_id
      - product_id

  RemoveFromCartPayload:
    type: "object"
    properties:
      customer_id:
        type: "integer"
      product_id:
        type: "integer"
    required:
      - customer_id
      - product_id

  CartResponse:
    type: "object"
    properties:
      message:
        type: "string"
      status:
        type: "string"

  EmptyCartPayload:
    type: "object"
    properties:
      customer_id:
        type: "integer"
    required:
      - customer_id

  EmptyCartResponse:
    type: "object"
    properties:
      message:
        type: "string"
      status:
        type: "string"

  ViewCartResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
      products:
        type: "array"
        items:
          $ref: "#/definitions/ProductResponse"

  PlaceOrderPayload:
    type: "object"
    properties:
      customer_id:
        type: "integer"
    required:
      - customer_id

  OrderResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      customer_id:
        type: "integer"
      status:
        type: "integer"
      total_price:
        type: "number"