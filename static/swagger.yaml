swagger: '2.0'
info:
  title: "Ecommerce API"
  description: "API that includes resources to manage an ecommerce website"
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

# Routes  
paths: 
  # Login path
  /customers/login:
    post:
      tags:
        - Customer
      summary: "Login endpoint (generate a token)"
      description: "Endpoint for user authentication, and token generation"
      parameters:
        - in: "body"
          name: "body"
          description: "Credentials for login (email and password)"
          required: true
          schema:
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Login Successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              token: "kjhjygfjgdhv/;lvkcnm...."
              message: "Successfully logged in"
              status: "success"

  # Get All Customers Path
  /customers:
    get:
      tags: 
        - Customer
      summary: "Retrieve a list of customer objects"
      description: "Endpoint to retrieve all customers, requires token authentication"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved all customers"
          schema:
            $ref: "#/definitions/GetAllCustomers"
          examples:
            application/json:
              name: "Dare Fatade"
              email: "dfata@gmail.com"
              phone: "1256598789"
              username: "jftade"

  # Create Customer
  /customers/create:
    post:
      tags: 
        - Customer
      summary: "Create a new customer"
      description: "Endpoint to create a new customer"
      parameters:
        - in: "body"
          name: "body"
          description: "Customer details"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/CustomerResponse"
  
  # Create Product
  /products/create:
    post:
      tags:
        - Product
      summary: "Create a new product"
      description: "Endpoint to create a new product"
      parameters:
        - in: "body"
          name: "body"
          description: "Product details"
          required: true
          schema:
            $ref: "#/definitions/CreateProductPayload"
      responses:
        201:
          description: "Product created successfully"
          schema:
            $ref: "#/definitions/ProductResponse"

  # List Products
  /products:
    get:
      tags:
        - Product
      summary: "List all products"
      description: "Retrieve a list of all products"
      responses:
        200:
          description: "Successfully retrieved all products"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProductResponse"

  # Retrieve Order
  /orders/{order_id}:
    get:
      tags:
        - Order
      summary: "Retrieve a specific order"
      description: "Retrieve details of a specific order by ID"
      parameters:
        - in: "path"
          name: "order_id"
          required: true
          type: "integer"
          description: "ID of the order to retrieve"
      responses:
        200:
          description: "Order retrieved successfully"
          schema:
            $ref: "#/definitions/OrderResponse"

  # Add to Cart
  /cart:
    post:
      tags:
        - Cart
      summary: "Add items to cart"
      description: "Endpoint to add items to the shopping cart"
      parameters:
        - in: "body"
          name: "body"
          description: "Product details and quantity"
          required: true
          schema:
            $ref: "#/definitions/AddToCartPayload"
      responses:
        200:
          description: "Item added to cart successfully"
          schema:
            $ref: "#/definitions/CartResponse"

  # View Cart
  /cart/view:
    get:
      tags:
        - Cart
      summary: "View items in the cart"
      description: "Endpoint to view all items in the shopping cart"
      responses:
        200:
          description: "Cart items retrieved successfully"
          schema:
            $ref: "#/definitions/CartResponse"

  # Remove from Cart
  /cart/{product_id}:
    delete:
      tags:
        - Cart
      summary: "Remove an item from the cart"
      description: "Endpoint to remove an item from the cart by product ID"
      parameters:
        - in: "path"
          name: "product_id"
          required: true
          type: "integer"
          description: "ID of the product to remove"
      responses:
        200:
          description: "Item removed from cart successfully"

  # Empty Cart
  /cart/empty:
    post:
      tags:
        - Cart
      summary: "Empty the cart"
      description: "Endpoint to empty all items from the cart"
      responses:
        200:
          description: "Cart emptied successfully"

  # Place Order
  /orders:
    post:
      tags:
        - Order
      summary: "Place an order"
      description: "Endpoint to place an order using the items in the cart"
      responses:
        201:
          description: "Order placed successfully"
          schema:
            $ref: "#/definitions/OrderResponse"

# Payload and Responses
definitions: 
  # Login Definitions
  LoginPayload:
    type: "object"
    properties: 
      email:
        type: "string"
        description: "Email"
      password:
        type: "string"
        description: "Password"
    required:
      - "email"
      - "password"

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
        description: "Authentication token on successful login"
      message:
        type: "string"
        description: "Message indicating success or failure"
      status:
        type: "string"
        description: "Status of operation"
    required:
      - "message"
      - "status"

  # Create Customer Payload
  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Customer name"
      email:
        type: "string"
        description: "Customer email"
      password:
        type: "string"
        description: "Customer password"
      phone:
        type: "string"
        description: "Customer phone"
      username:
        type: "string"
        description: "Customer username"
    required:
      - "name"
      - "email"
      - "password"
      - "username"

  CustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Customer ID"
      name:
        type: "string"
        description: "Customer name"
      email:
        type: "string"
        description: "Customer email"

  # Create Product Payload
  CreateProductPayload:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Product name"
      price:
        type: "number"
        format: "float"
        description: "Product price"
    required:
      - "name"
      - "price"

  ProductResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Product ID"
      name:
        type: "string"
        description: "Product name"
      price:
        type: "number"
        format: "float"
        description: "Product price"

  # Order Response
  OrderResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Order ID"
      order_date:
        type: "string"
        format: "date-time"
        description: "Date of the order"
      customer_id:
        type: "integer"
        description: "ID of the customer who placed the order"

  # Add to Cart Payload
  AddToCartPayload:
    type: "object"
    properties:
      product_id:
        type: "integer"
        description: "Product ID"
      customer_id:
        type: "integer"
        description: "Customer ID"
    required:
      - "product_id"
      - "customer_id"

  CartResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        description: "ID of the customer"
      products:
        type: "array"
        items:
          $ref: "#/definitions/ProductResponse"
